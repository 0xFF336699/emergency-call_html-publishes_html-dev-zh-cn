# 最终部署脚本 - 实现基于内容Hash的精准增量上传
name: Deploy Website to Qiniu (Content-based Incremental)

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Upload to Qiniu and Set Cache
        env:
          QINIU_BUCKET_NAME: ${{ secrets.QINIU_BUCKET_NAME }}
          QINIU_ACCESS_KEY: ${{ secrets.QINIU_ACCESS_KEY }}
          QINIU_SECRET_KEY: ${{ secrets.QINIU_SECRET_KEY }}
        run: |
          # --- 准备工作 (使用最新 v2.16.0) ---
          echo "Downloading and setting up qshell v2.16.0..."
          wget https://github.com/qiniu/qshell/releases/download/v2.16.0/qshell-v2.16.0-linux-amd64.tar.gz -O qshell.tar.gz
          tar -xvf qshell.tar.gz
          chmod +x qshell
          
          # --- 配置账户 ---
          echo "Configuring qshell account..."
          ./qshell account $QINIU_ACCESS_KEY $QINIU_SECRET_KEY deploy_user
          
          # --- 第 1 步：基于文件内容Hash，增量上传所有资源文件 ---
          echo "Step 1: Incrementally uploading assets based on content hash..."
          cat > qupload-assets.json << EOF
          {
              "src_dir": "docs",
              "bucket": "$QINIU_BUCKET_NAME",
              "overwrite": false,
              "check_hash": true,
              "rescan_local": true,
              "log_level": "warn",
              "ignore_patterns": [
                  "*.html"
              ]
          }
          EOF
          ./qshell qupload -c 10 qupload-assets.json

          # --- 第 2 步：覆盖上传 HTML 入口文件 (这一步逻辑不变) ---
          echo "Step 2: Overwriting HTML entry files..."
          cat > qupload-html.json << EOF
          {
              "src_dir": "docs",
              "bucket": "$QINIU_BUCKET_NAME",
              "overwrite": true,
              "rescan_local": true,
              "log_level": "warn",
              "file_list": "html-files.txt"
          }
          EOF
          find docs -type f -name "*.html" | sed 's/docs\///' > html-files.txt
          ./qshell qupload -c 10 qupload-html.json

          # --- 第 3 步：为所有 HTML 文件设置缓存策略 (这一步逻辑不变) ---
          echo "Step 3: Setting 'no-cache' for all HTML files..."
          cat html-files.txt | while read key; do
            echo "Setting 'Cache-Control: no-cache' for file: $key"
            ./qshell chgm $QINIU_BUCKET_NAME "$key" 'Cache-Control: no-cache'
          done

          echo "Content-based incremental deployment completed successfully."
